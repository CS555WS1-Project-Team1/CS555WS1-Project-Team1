from gedcom.parser import Parser
import datetime
# from datetime import date
import collections
import calendar

def convertdate(d):
    d=d.split(" ")
    try:
        mo=["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"]
        return datetime.datetime(int(d[2]), mo.index(d[1])+1, int(d[0]))
    except Exception as e:
        return "ERROR"

def recenddeath():
    file_path = 'SAVLEEN KAUR-FAMILYTREE.ged'
    gedcom_parser = Parser()
    gedcom_parser.parse_file(file_path)
    root_child_elements = gedcom_parser.get_root_child_elements()
    lis=[]
    # Iterate through all root child elements
    for element in root_child_elements:
        if element.get_tag()=="INDI":
            for pe in element.get_child_elements():
                if pe.get_tag()=="DEAT":
                    for p in pe.get_child_elements():
                        if p.get_tag()=="DATE":
                            death_date=p.get_value()
                            death_date=convertdate(death_date)
                            if(death_date=="ERROR"):
                                print("Invalid "+pe.get_tag()+" date for "+element.get_pointer())
                            elif((datetime.datetime.now() - death_date).days<30):
                                lis.append(element.get_pointer())
    
    print("List of Individual who died recently are:",lis)


def invaliddates():
    file_path = 'SAVLEEN KAUR-FAMILYTREE.ged'
    gedcom_parser = Parser()
    gedcom_parser.parse_file(file_path)
    root_child_elements = gedcom_parser.get_root_child_elements()
    lis=[]
    print()
    print ("LISTING ALL INVALID DATES BELOW:")
    # Iterate through all root child elements
    for element in root_child_elements:
        if element.get_tag()=="INDI" or element.get_tag()=="FAM":
            #print(element.get_pointer())
            for pe in element.get_child_elements():
                if pe.get_tag()=="DEAT" or pe.get_tag()=="MARR" or pe.get_tag()=="BIRT":
                    for p in pe.get_child_elements():
                        if p.get_tag()=="DATE":
                            date=p.get_value()
                            date=convertdate(date)
                            if(date=="ERROR"):
                                print("Invalid "+pe.get_tag()+" date for "+element.get_pointer())
                            
                            
                            # if(date.month in [1,3,5,7,8,10,12] and date.day>31):
                            #     print("Invalid "+pe.get_tag()+" date for "+element.get_pointer())
                            # if(date.month in [4,6,9,11] and date.day>30):
                            #     print("Invalid "+pe.get_tag()+" date for "+element.get_pointer())
                            # if(date.month in [2] and date.day>29 and calendar.isleap(date.year)==True):
                            #     print("Invalid "+pe.get_tag()+" date for "+element.get_pointer())     
                            # if(date.month in [2] and date.day>28 and calendar.isleap(date.year)==False):
                            #     print("Invalid "+pe.get_tag()+" date for "+element.get_pointer())



recenddeath()   ###list recently died individual
invaliddates()   ###check if dates are invalid

print()
print("End of Program")    
    
